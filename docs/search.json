[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "",
    "text": "auteur: Camille Mazoyer, camille.mazoyer@ird.fr\nmaj: janvier 2024\nMerci de m’envoyer un email si une des infos ci-dessous n’est plus à jour, pour que j’améliore la documentation."
  },
  {
    "objectID": "index.html#anaconda",
    "href": "index.html#anaconda",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Anaconda",
    "text": "Anaconda\n\nInstallation de pyferret avec Anaconda\nInstallation d’un environnement Anaconda pour l’océanographie\nPartager un environnement Anaconda entre deux utilisateurs d’une même machine"
  },
  {
    "objectID": "index.html#ferret",
    "href": "index.html#ferret",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Ferret",
    "text": "Ferret\n\nPremiers pas en ferret ( à faire)"
  },
  {
    "objectID": "index.html#fortran",
    "href": "index.html#fortran",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Fortran",
    "text": "Fortran\n\nOptions de compilation pour debugger en Fortran\nutilisation du debugger gdb avec croco (sur le cluster OSU)\nListing des erreurs de compilations rencontrées lors d’installations de CROCO ou ROMS sur les machines de TP ou laptop"
  },
  {
    "objectID": "index.html#matlab",
    "href": "index.html#matlab",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Matlab",
    "text": "Matlab\n\nCréer un exécutable sous matlab: exemple sur le cluster de l’OSU"
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Python",
    "text": "Python\n\nUtilisation de google collab pour des jupyter notebook python\nCROCO avec Python .\nla bibliothèque XOA gère les sorties CROCO et est documentée ici: https://xoa.readthedocs.io/en/latest/index.html\nla bibliothèque Vacuum est disponible ici : https://github.com/VACUMM/vacumm (mais elle n’est plus à jour)\nHow to Make Python Code Run Incredibly Fast\nUtilisation de xarray conseillée (à faire)"
  },
  {
    "objectID": "index.html#cluster-de-losu-pytheas",
    "href": "index.html#cluster-de-losu-pytheas",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Cluster de l’OSU Pytheas",
    "text": "Cluster de l’OSU Pytheas\n\ncluster de l’osupytheas :https://calcul.osupytheas.fr/\nDocumentation pour une Connexion à distance à Tools"
  },
  {
    "objectID": "index.html#cluster-régional-ccamu-marseille",
    "href": "index.html#cluster-régional-ccamu-marseille",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "Cluster régional CCAMU Marseille",
    "text": "Cluster régional CCAMU Marseille\n\nMes docs sur l’utilisation du Mésocentre CCAMU de Marseille\ntutoriaux: https://mesocentre.univ-amu.fr/les-tutoriaux/"
  },
  {
    "objectID": "index.html#idris",
    "href": "index.html#idris",
    "title": "Scientific computing cheatsheets at the laboratory MIO in oceanography",
    "section": "IDRIS",
    "text": "IDRIS\n\nhttp://www.idris.fr\ncheat sheet ici=&gt; http://www.idris.fr/media/su/idrismemento1.pdf\nUtilisation des jupyter notebook sur Jean Zay: https://github.com/meom-group/tutos/blob/master/jean-zay/jupyter-notebook-on-jean-zay.md et http://www.idris.fr/jean-zay/pre-post/jean-zay-jupyter-notebook.html"
  },
  {
    "objectID": "sheets/connexion_longue_ssh.html",
    "href": "sheets/connexion_longue_ssh.html",
    "title": "Garder une connexion ssh persistante (éviter les déconnexions trop rapides)",
    "section": "",
    "text": "Il faut editer votre fichier de config ssh qui se trouve dans votre $home. Le fichier est : ~/.ssh/config\nHost *\n    ServerAliveInterval 240"
  },
  {
    "objectID": "sheets/rsync.html",
    "href": "sheets/rsync.html",
    "title": "Rsync (local ou via ssh)",
    "section": "",
    "text": "rsync ssh exemple 1: synchronizer deux repertoires locaux\nrsync -uav /home/.../2015 mon_nouveau_rep/.\n-a, --archive              archive mode; equals -rlptgoD (no -H,-A,-X)\n-u, --update                skip files that are newer on the receiver\n-v, --verbose              increase verbosity\n\n\nrsync ssh exemple 2: synchronizer le répertoire 2015 de la machine distante dans repertoire courant\nrsync -uave ssh user@machine:/home/.../2015 .\n-a, --archive              archive mode; equals -rlptgoD (no -H,-A,-X)\n-u, --update                skip files that are newer on the receiver\n-v, --verbose              increase verbosity\n-e, --rsh=COMMAND          specify the remote shell to use\n\n\nrsync ssh exemple 3: ssh et port différent du port 22 (par ex via un tunnel)\nrsync -uave 'ssh -p 5530' mazoyer@localhost:/home/mazoyer/CROCO/SRC/croco/croco_git_dev_2021_MIO_for_MUSTANG .\nrecuperation de jean-zay sur respore:\ntunneljeanzay\nrsync -uave 'ssh -p 5129' rutv918@localhost:/gpfsstore/rech/utv/rutv918/ergon/output_mitgcm/2020_PHYS_ARPEGE/TBAY_20* .\n\n\nrsync ssh exemple 4: script IDRIS vers ordi local\n#script de recuperation des netcdf de l'IDRIS vers le repertoire /mnt/BIOPHY-RW/Vincent/Camille_IDRIS_OFC sur ssh\n\n# projet : Ocean Front Change\n# avec : Vincent Rossi\n# date : janvier 2020\n\n# u : avoid copying the files that we already have in the destination folder that have not been modified in the source folder\n# v : verbose\n# a :  archive\n# r : recursive\n\ncd /mnt/BIOPHY-RW/Vincent/Camille_IDRIS_OFC\ncd average \nrsync -uave ssh rutv918@jean-zay.idris.fr:/gpfsstore/rech/khe/ryff001/WOES_OUT/SCRATCH_RUN_MOZ1/roms_avg_*.nc .\n\ncd ../diagnostics \nrsync -uave ssh rutv918@jean-zay.idris.fr:/gpfsstore/rech/khe/ryff001/WOES_OUT/SCRATCH_RUN_MOZ1/roms_avg_*.nc .\n\ncd ../surface_average\nrsync -uave ssh rutv918@jean-zay.idris.Fr:/gpfsstore/rech/khe/ryff001/WOES_OUT/SCRATCH_RUN_MOZ1/roms_surf_avg_* ."
  },
  {
    "objectID": "sheets/connexion_via_tunnel.html",
    "href": "sheets/connexion_via_tunnel.html",
    "title": "Connexion à un ordinateur via un tunnel",
    "section": "",
    "text": "3 exemples ci-dessous:"
  },
  {
    "objectID": "sheets/connexion_via_tunnel.html#mise-en-place-des-scripts",
    "href": "sheets/connexion_via_tunnel.html#mise-en-place-des-scripts",
    "title": "Connexion à un ordinateur via un tunnel",
    "section": "Mise en place des scripts",
    "text": "Mise en place des scripts\nà écrire dans .bash_aliases :\n        alias hrespore=\"ssh mazoyer@respore\"\n        alias tunnelrespore='ssh -X -N -f mazoyer@lseet.univ-tln.fr -L5533:respore:22'\n        alias htunnelrespore='ssh -X -p 5533 mazoyer@localhost'\n        alias sftprespore='sftp -P 5533 mazoyer@localhost'\n        # kill tunnel si besoin\n        alias ps=\"ps aux\"\n        killtunnelrespore(){\n          idtunnel=`ps | grep -i respore | grep -i ssh | awk '{print $2}'`\n          kill -9 $idtunnel\n        }"
  },
  {
    "objectID": "sheets/connexion_via_tunnel.html#creation-du-tunnel",
    "href": "sheets/connexion_via_tunnel.html#creation-du-tunnel",
    "title": "Connexion à un ordinateur via un tunnel",
    "section": "Creation du tunnel",
    "text": "Creation du tunnel\nA faire une seule fois au démarrage de son ordinateur, pour créer le tunnel:\ntunnelrespore"
  },
  {
    "objectID": "sheets/connexion_via_tunnel.html#utilisation",
    "href": "sheets/connexion_via_tunnel.html#utilisation",
    "title": "Connexion à un ordinateur via un tunnel",
    "section": "utilisation",
    "text": "utilisation\nA chaque fois qu’on veut se connecter à respore:\nhtunnelrespore  (pour home by tunnelrespore)\nPour échanger des fichiers entre son ordi et respore:\nsftprespore\npuis pour envoyer un fichier vers le répertoire repertoire_sur_respore de Respore:\nput monfichier repertoire_sur_respore/.\npour récupérer un fichier de repertoire_sur_respore vers mon ordi:\nget repertoire_sur_respore/monfichier .\nSi le tunnel ne fonctionne plus, il faut le détruire puis le recréer. La commande killtunnelrespore gère la destruction de manière automatique:\nkilltunnelrespore\ntunnelrespore"
  },
  {
    "objectID": "sheets/anaconda_oceanographie.html",
    "href": "sheets/anaconda_oceanographie.html",
    "title": "Anaconda pour l’oceanographie",
    "section": "",
    "text": "Suivre cette doc pour l’installation de Anaconda de manière générale:A FAIRE Installation de pyferret avec Anaconda\n\nInstallation de Anaconda\nIl est d’abord nécesaire d’installer Anaconda\n\n\nCréation d’un environnement pour l’océanographie\nconda create --name oceano\nconda activate oceano\nconda install pandas numpy xarray netCDF4 dask scipy ipython jupyter cartopy numba\nconda install matplotlib ipykernel cloudpickle ipykernel\nconda install -c conda-forge xgcm hdf5storage\n\n\nCréation d’un autre environnement avec pyferret\nSi on veut aussi installer pyferret dans le même environnement\nconda create --name FERRET -c conda-forge/label/cf202003 pyferret ferret_datasets --yes\nconda activate FERRET\nconda install -c conda-forge xgcm hdf5storage xarray \nconda install matplotlib netCDF4 ipython jupyter cartopy numba ipykernel\nremarque:\n- numpy est installé automatiquement par dépendance de pyferret - pandas, dask, cloudpickle, scipy sont installés automatiquement aussi par dépendances.\n\n\nUtilisation de ces environnements\nPour utiliser cet environnement:\nconda activate oceano\nPour désactiver cet environnement lorsqu’on le souhaite:\nconda deactivate\nremarque: - pas d’installation de spyder (incompatibilités, … si quelqu’un a une solution, je suis preneuse…)\n\n\nInstallation d’un environnement conda pour Copernicus\nVoir la doc Documentation sur Copernicus Marine ."
  },
  {
    "objectID": "sheets/executable_matlab.html",
    "href": "sheets/executable_matlab.html",
    "title": "Créer un exécutable Matlab",
    "section": "",
    "text": "But: pouvoir utiliser son script matlab sur une machine qui n’a pas de licence matlab\nInconvénients: il faut créer l’éxécutable sur la même architecture que l’architecture cible (ex: linux pour linux, …)\n\n1. Suivre la doc du SIP\nhttps://calcul.osupytheas.fr/?p=478\n\n\n2. Etape 1: création de l’exécutable, choix des arguments\nOn peut choisir des arguments de notre code matlab flottants et non de type chaine de charactere: Avant la phrase du SIP ” Une fois vos codes et modules ajoutés, vous devez créer le package en cliquant sur Package.”, c’est important de dire que les arguments donnés au code peuvent être indiqués en chaines de caractères (par défault) ou en flottants (ce dont moi j’avais besoin). Il y a une case à cocher. Tous les arguments doivent être du même type (flottant ou string)\n\n\n3. Lancement du code via slurm\nPour la Deuxième étape indiquée sur calcul.osupytheas.fr, je propose une autre solution que je trouve plus lisible quand on a des arguments. Mais c’est à vous de voir si vous préférez le tutorial du SIP ou cette possibilité: - 1. Copier le script run_xxx.sh contenu dans le répertoire for_testing vers notre répertoire de travail et modifier la ligne pointant vers l’exécutable, si besoin : bash     exe_dir=/home/mazoyer/matlab_to_exe/rep_exe - 2. Créer un fichier run.slurm de lancement batch comme suit, si l’on a un script matlab avec 3 arguments qui seront ici arg1, arg2, arg3 (à remplacer dans votre cas). Le répertoire Matlab /usr/local/MATLAB/MATLAB_Runtime/v910 est le répertoire racine de Matlab contenant par exemple le répertoire runtime/glnxa64.\n    #!/bin/sh\n    # script pour l'exécution des codes Matlab packages.\n    #\n    #Environnement MATLAB Runtime\n\n    #SBATCH --job-name=matlab_MCR\n    #SBATCH --time=240:00:00\n    #SBATCH --mail-user=xxx.yyy@ird.fr\n    #SBATCH --partition=seq\n    #SBATCH --output=resultslumr.log\n\n    echo 'start matlab'\n    time sh run_xxx.sh /usr/local/MATLAB/MATLAB_Runtime/v910 arg1 arg2 arg3\n    echo 'end matlab'\n\n\nPour lancer ensuite l’exécutable, taper la commande:\n\n\n    sbatch run.slurm\nAttention! le run batch ne s’arrête pas une fois la fin de l’éxécution matlab, il faut penser à killer le job evéntuellement."
  },
  {
    "objectID": "sheets/copernicusmarine.html",
    "href": "sheets/copernicusmarine.html",
    "title": "Comment utiliser l’outil Copernicusmarine",
    "section": "",
    "text": "Installation\ninstallation de l’outil de copernicus (nouveau) à la place de motu client, via anaconda. Pour plus d’informations, voir : https://pypi.org/project/copernicusmarine/.\nL’outil est installé sur tools accessible à tous.\n\n\nPremière utilisation\n\nsi vous n’utilisez pas la machine tools, installer l’environnement anaconda copernicus:\n\n conda install copernicusmarine\n\nSi vous utilisez la machine tools, créer son alias dans .bashrc:\n\n alias envcopernicus='conda activate /MODELISATION/ocean/CONDA/copernicus'\nsinon,\nalias envcopernicus='conda activate copernicus'\n\nrelancer un terminal, puis lancer l’environnement\n\nenvcopernicus\n\nA faire une seule fois: indiquer son login copernicus avec:\n\nconda activate copernicus\ncopernicusmarine login\nCa permettra que le login et mot de passe soit chargé dans un fichier caché. \n\n\nUtilisation\nEnsuite, on utilise des scripts dans ce style:\nimport copernicusmarine as cm\n\ncm.subset(\n  dataset_id=\"cmems_obs_mob_glo_phy-cur_nrt_0.25deg_P1D-m\",\n  dataset_version=\"202311\",\n  variables=[\"uo\", \"vo\"],\n  minimum_longitude=0,\n  maximum_longitude=80,\n  minimum_latitude=-50,\n  maximum_latitude=-5,\n  start_datetime=\"2023-01-01T00:00:00\",\n  end_datetime=\"2023-12-31T00:00:00\",\n  minimum_depth=0,\n  maximum_depth=0,\n)"
  },
  {
    "objectID": "sheets/universite_toulon_proxy.html",
    "href": "sheets/universite_toulon_proxy.html",
    "title": "Travailler à l’université de Toulon sous proxy",
    "section": "",
    "text": "A faire uniquement lorsque l’on est derrière un proxy avec authentification, connecté en RJ45. Attention, il faut éviter de mettre des “!” ou “@” dans son mot de passe, cela peut poser problème en ligne de commande ensuite.\n\n1. Git\nCréer le fichier ~/.gitconfig s’il n’existe pas. Y ajouter les infos sur le proxy:\n[https]\n        proxy = http://monlogin:monmotdepasse@cache.univ-tln.fr:3128\n        sslVerify = false\n[http]\n        proxy = http://monlogin:monmotdepasse@cache.univ-tln.fr:3128\n        sslVerify = false\n        proxyAuthMethod = basic\n\n\n2. Wget\nconfigurer Wget pour les proxy selon stackoverflow.com.\nexemple:\nindiquer dans le fichier .bashrc:\nexport http_proxy=cache.univ-tln.fr:3128\nexport https_proxy=cache.univ-tln.fr:3128\npuis en ligne de commande, suivant ce qu’on veut télécharger:\nwget --proxy-user=\"tonlogin\" --proxy-password=\"tonmotdepasse\" \"https://xxxx.tar.gz\"\n\n\n3. configurer anaconda pour les proxy (ne fonctionne pas, pourquoi …)\nCréer le fichier .condarc dans votre home avec les infos suivantes sur le proxy de la fac de Toulon (pas nécessaire à Luminy). user étant votre login, et pass votre mot de passe. Voir la doc de Anaconda.\nfichier .condarc\nproxy_servers:\n    http: http://user:pass@cache.univ-tln.fr:3128\n    https: https://user:pass@cache.univ-tln.fr:3128"
  },
  {
    "objectID": "sheets/clef_ssh.html",
    "href": "sheets/clef_ssh.html",
    "title": "Se connecter aux machines de Toulon (respore, lseet), Luminy (cluster, tools, ssh) et à l’IDRIS sans mot de passe",
    "section": "",
    "text": "ssh-keygen -t ed25519 -C \"prenom.nom@monemail.fr\"\nIl est maintenant conseillé de générer une clef ed255 plutôt que rsa. Indiquer une passphrase qui remplacera votre mot de passe et que votre ordinateur vous demandera qu’une seule fois par démarrage.\nSur mac: Ajouter dans le ~/.ssh/config :\nHost *\n    UseKeychain yes"
  },
  {
    "objectID": "sheets/clef_ssh.html#solution-1-la-plus-simple-attention-penser-à-lancer-le-vpn-pour-luminy",
    "href": "sheets/clef_ssh.html#solution-1-la-plus-simple-attention-penser-à-lancer-le-vpn-pour-luminy",
    "title": "Se connecter aux machines de Toulon (respore, lseet), Luminy (cluster, tools, ssh) et à l’IDRIS sans mot de passe",
    "section": "Solution 1 (la plus simple) (attention : penser à lancer le VPN pour Luminy)",
    "text": "Solution 1 (la plus simple) (attention : penser à lancer le VPN pour Luminy)\nChanger “monlogin” avec votre login.\n\nToulon\nssh-copy-id -i ~/.ssh/id_ed25519 monlogin@lseet.univ-tln.fr\nssh monlogin@lseet.univ-tln.fr  #=&gt; que si on n'est pas dans les locaux de la fac de Toulon quand on fait la manipulation\nssh-copy-id -i ~/.ssh/id_ed25519 monlogin@respore\n\n\nLuminy : penser à lancer le VPN de Luminy !!!!\nssh-copy-id -i ~/.ssh/id_ed25519 monlogin@ssh.osupytheas.fr\nssh-copy-id -i ~/.ssh/id_ed25519 monlogin@cluster.osupytheas.fr\nSi la copie a fonctionné, vous devriez voir apparaitre: “number of key added: 1” et vous devriez pouvoir vous connecter sans mot de passe (Ubuntu va vous demander un mot de passe, votre passphrase à la première connexion ssh)."
  },
  {
    "objectID": "sheets/clef_ssh.html#solution-2.-si-cette-solution-ne-fonctionne-pas-il-faut-copier-la-clef-à-la-main",
    "href": "sheets/clef_ssh.html#solution-2.-si-cette-solution-ne-fonctionne-pas-il-faut-copier-la-clef-à-la-main",
    "title": "Se connecter aux machines de Toulon (respore, lseet), Luminy (cluster, tools, ssh) et à l’IDRIS sans mot de passe",
    "section": "Solution 2. Si cette solution ne fonctionne pas, il faut copier la clef “à la main”:",
    "text": "Solution 2. Si cette solution ne fonctionne pas, il faut copier la clef “à la main”:\n\nToulon\ncat ~/.ssh/id_ed25519.pub | ssh monlogin@lseet.univ-tln.fr \"mkdir -p ~/.ssh && cat &gt;&gt;  ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\"\nssh monlogin@lseet.univ-tln.fr # =&gt; que si on n'est pas dans les locaux de la fac de Toulon quand on fait la manipulation\ncat ~/.ssh/id_ed25519.pub | ssh monlogin@respore.univ-tln.fr \"mkdir -p ~/.ssh && cat &gt;&gt;  ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\"\n\n\nLuminy : penser à lancer le VPN de Luminy !!!!\ncat ~/.ssh/id_ed25519.pub | ssh monlogin@meduse.osupytheas.fr \"mkdir -p ~/.ssh && cat &gt;&gt;  ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\"\ncat ~/.ssh/id_ed25519.pub | ssh monlogin@cluster.osupytheas.fr \"mkdir -p ~/.ssh && cat &gt;&gt;  ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\"\nsi cela ne fonctionne pas, chmod 700 -R ~/.ssh"
  },
  {
    "objectID": "sheets/ccamu.html",
    "href": "sheets/ccamu.html",
    "title": "Utilisation du cluster régional du CCAMU de Marseille",
    "section": "",
    "text": "auteur: camille.mazoyer@ird.fr maj : janvier 2024"
  },
  {
    "objectID": "sheets/ccamu.html#sftp",
    "href": "sheets/ccamu.html#sftp",
    "title": "Utilisation du cluster régional du CCAMU de Marseille",
    "section": "SFTP",
    "text": "SFTP\nSur la machine ssh ou chez vous, vous pouvez utiliser un alias à insérer dans le fichier .bashrc:\nalias sftpccamu='sftp -P 8822 votrelogin@login.mesocentre.univ-amu.fr'\nsi vous utilisez une connexion via un tunnel\nalias sftptunnelccamu='sftp -P 5535 cmazoyer@localhost'\nEnsuite, la connection se fait avec la commande:\nsftpccamu\nou par le tunnel:\nsftptunnelccamu\nPuis utiliser les commandes get ou put pour recevoir ou envoyer des fichiers entre les deux machines"
  },
  {
    "objectID": "sheets/ccamu.html#scp",
    "href": "sheets/ccamu.html#scp",
    "title": "Utilisation du cluster régional du CCAMU de Marseille",
    "section": "SCP",
    "text": "SCP\nVous pouvez aussi utiliser la commande suivante, en se plaçant sur la machine locale (cluster de l’OSU).\nscp -P 8822 fichierlocal monlogin@login.mesocentre.univ-amu.fr:repertoireccamu/. \nsi vous utilisez une connexion via un tunnel\nscp -P 5535 fichierlocal monlogin@localhost:repertoireccamu/."
  },
  {
    "objectID": "sheets/ccamu.html#rsync",
    "href": "sheets/ccamu.html#rsync",
    "title": "Utilisation du cluster régional du CCAMU de Marseille",
    "section": "Rsync",
    "text": "Rsync\nRechercher ma doc sur rsync (local ou via ssh), en se plaçant sur la machine locale (cluster de l’OSU).\nrsync -uave 'ssh -p 8822' votrelogin@login.mesocentre.univ-amu.fr:repertoireccamu/.\nsi vous utilisez une connexion via un tunnel\nrsync -uave 'ssh -p 5535' votrelogin@localhost:repertoireccamu/."
  },
  {
    "objectID": "sheets/ccamu.html#si-la-durée-de-transfert-est-supérieure-à-30-min",
    "href": "sheets/ccamu.html#si-la-durée-de-transfert-est-supérieure-à-30-min",
    "title": "Utilisation du cluster régional du CCAMU de Marseille",
    "section": "Si la durée de transfert est supérieure à 30 min",
    "text": "Si la durée de transfert est supérieure à 30 min\nSe référer à la doc https://mesocentre.univ-amu.fr/sauvegarde-donnees/ et la suivre. Une fois connecté à un noeud de calcul comme proposé dans la doc, il faut créer un tunnel avec la machine cluster puis s’y connecter avec une des 3 méthodes plus haut (attention, le port est le 5530 et la machine est localhost):\nssh -X -C -N -f votrelogin@ssh.osupytheas.fr -L5530:cluster.osupytheas.fr:22\nsftp -P 5530 votrelogin@localhost"
  },
  {
    "objectID": "sheets/detacher_processus_nohup.html",
    "href": "sheets/detacher_processus_nohup.html",
    "title": "détacher des processus avec la commande nohup",
    "section": "",
    "text": "But: pouvoir detacher un processus et le faire tourner meme si on n’est pas connecté: (voir https://www.tecmint.com/keep-remote-ssh-sessions-running-after-disconnection/ )\n\nFonctionnement\nPour créer un screen (nommé nomduscreen)\nscreen -S nomduscreen\nPour sortir du screen, le détacher: “To detach a screen from the remote terminal, just press “Ctrl+a” immediately followed by “d”” ctrl+a puis d\npour voir tous les screen qu’on a, dans un terminal normal:\nscreen -r\nThere are several suitable screens on:\n    2283.pts-100.service7    (Detached)\n    2221.testcamille    (Detached)\ns'il n'y a qu'un screen, screen -r permet de revenir au screen \n\nsi plusieurs screen, cela les liste\nPour aller dedans:\n# si le résultat de la commande est un tableau\nscreen -r 2221.testcamille\n  # si on veut se connecter au screen avec ce numéro\nPour en supprimer un, aller dedans puis:\nexit \n\n\nAutres infos à trier:\nExecution de son programme :\nscreen -S session_julien ./monprog &gt;output.txt 2&gt;&1&\n→ et on ferme la fenetre (on peut egalement fermer sa session cela ne pose pas de pb)\nPour voir si il y a des screens qui tournent :\nscreen -ls\nDe chez soi on se connecte sur la machine sur laquelle on a des scripts qui tournent en nohup et on recupere le shell via la commande :\nscreen -r session_julien\nscreen et le shell multi-utilisateur pour travailler avec un collegue de travail sur un meme shell !\nMoi (utilisateur root)\nMoi : chmod u+s /usr/bin/screen\nMoi : screen -S test\n\nLui : screen -r root/ (bien specifier le \"/\" a la fin)\net voila !\nQuelques commandes utiles\n\nTaper screen pour lancer un shell screen\nCtrl-a c : cree un nouveau shell screen\nCtrl-a 0 : Passe au shell numero 0\nCtrl-a 1 : Passe au shell numero 1\nCtrl-a ? : Voir les raccourcis"
  },
  {
    "objectID": "sheets/zenodo_github.html",
    "href": "sheets/zenodo_github.html",
    "title": "Utilisation de Zenodo et Github pour mettre son code sous DOI",
    "section": "",
    "text": "se créer un compte sur github\nsi vous travaillez à plusieurs et que le logiciel a vocation à être diffuser, je vous conseille de créer une organisation sous Github (gestion de projet à plusieurs). Sinon, vous pouvez juste créer un projet sous votre compte. voir creating-a-new-organization-from-scratch\nChoisir une organisation “plan Free” et remplir les informations de créer de l’organisation.\nSi le nom choisi est Tao-Soft par ex, l’url est alors https://github.com/TAO-Soft .\n\n\n\n\n\nCréer un dépot (repository) à l’intérieur de cette organisation. Il pourra y en avoir plusieurs pour les différents outils (pré, post processing, le software, …). Dans notre exemple, cela donne: https://github.com/orgs/TAO-Soft/repositories\nChoisir un dépôt public et indiquer la licence GNU General Public Licence V3.0 par ex"
  },
  {
    "objectID": "sheets/zenodo_github.html#création-dune-organisation",
    "href": "sheets/zenodo_github.html#création-dune-organisation",
    "title": "Utilisation de Zenodo et Github pour mettre son code sous DOI",
    "section": "",
    "text": "se créer un compte sur github\nsi vous travaillez à plusieurs et que le logiciel a vocation à être diffuser, je vous conseille de créer une organisation sous Github (gestion de projet à plusieurs). Sinon, vous pouvez juste créer un projet sous votre compte. voir creating-a-new-organization-from-scratch\nChoisir une organisation “plan Free” et remplir les informations de créer de l’organisation.\nSi le nom choisi est Tao-Soft par ex, l’url est alors https://github.com/TAO-Soft ."
  },
  {
    "objectID": "sheets/zenodo_github.html#création-dun-dépôt",
    "href": "sheets/zenodo_github.html#création-dun-dépôt",
    "title": "Utilisation de Zenodo et Github pour mettre son code sous DOI",
    "section": "",
    "text": "Créer un dépot (repository) à l’intérieur de cette organisation. Il pourra y en avoir plusieurs pour les différents outils (pré, post processing, le software, …). Dans notre exemple, cela donne: https://github.com/orgs/TAO-Soft/repositories\nChoisir un dépôt public et indiquer la licence GNU General Public Licence V3.0 par ex"
  },
  {
    "objectID": "sheets/zenodo_github.html#autoriser-zenodo-à-accéder-à-votre-organisation",
    "href": "sheets/zenodo_github.html#autoriser-zenodo-à-accéder-à-votre-organisation",
    "title": "Utilisation de Zenodo et Github pour mettre son code sous DOI",
    "section": "3.1 Autoriser Zenodo à accéder à votre organisation",
    "text": "3.1 Autoriser Zenodo à accéder à votre organisation\n\nAccéder au lien url de votre organisation, ici pour mon exemple: https://github.com/TAO-Soft (attention pas le lien de votre dépôt).\nCliquer sur “Settings”\nPuis dans le panel de gauche, cliquer sur “OAuth Application Policy”\nPuis “Remove restrictions”. Cela permettra que depuis votre compte zenodo personel, vous ayez accès aux dépôts de votre organisation. Vous vous callez sur les restrictions liées à votre compte personnel sans ajouter de blocage aussi via l’organisation."
  },
  {
    "objectID": "sheets/zenodo_github.html#sur-zenodo",
    "href": "sheets/zenodo_github.html#sur-zenodo",
    "title": "Utilisation de Zenodo et Github pour mettre son code sous DOI",
    "section": "3.2 Sur Zenodo",
    "text": "3.2 Sur Zenodo\nSe référer à la documentation github sur Zenodo.\n\nSe rendre sur Zenodo et se connecter à Zenodo avec son compte Github, le lien sera ainsi fait entre les deux sites web.\nDans la page settings, https://zenodo.org/account/settings/github/, cliquer sur “Sync Now”\nRafraichir la page avec F5\nPositionner le bouton sur “ON” sur le dépôt de votre organisation (ici TAO-Soft/Tao-Soft)\nRafraichir la page avec F5\nDans la section “Enabled Repositories”, le nouveau dépôt devrait apparaitre. Cliquer dessus.\nOn est alors sur la page https://zenodo.org/account/settings/github/repository/TAO-Soft/TAO-Soft, dans mon exemple.\nCliquer sur “Create release”, on se déplace alors sur une page du dépôt TAO-Soft du site Github\nDans “Choose a tag”, sélectioner le tag qui nous intéresse, par ex: v0.1.0.\nIndiquer le titre de la release. Par exemple: “Initial release v0.1.0”\nIl est conseiller de décrire la release (amélioration, bug fixed, …)\nCliquer sur le bouton vert “Publish release”\nCette release ayant été faite à partir de Zenodo, elle sera visible sur celui-ci. Rafraichir la page du dépôt sur Zenodo https://zenodo.org/account/settings/github/repository/TAO-Soft/TAO-Soft\nToutes les informations apparaissent, dont le DOI"
  },
  {
    "objectID": "sheets/connexion_distance_tools.html",
    "href": "sheets/connexion_distance_tools.html",
    "title": "Connexion à distance à Tools",
    "section": "",
    "text": "Via un tunnel SSH\nVoir la documentation: Connexion à un ordinateur via un tunnel\n\n\nVia le VPN de l’OSU pytheas\nSe référer à la Documentation du VPN. Une fois le VPN lancé, il suffit de se connecter à tools.osupytheas.fr en ssh par ex, ou avec putty pour windows.\n\n\nVia Rdesktop (pas fonctionnel ou fonctionnel?)\nInstallation sous ubuntu via:\napt-get install rdesktop\nUtilisation\nrdesktop -u votrelogin 172.20.9.140\n\n\nVia x2go\nSolution possible. A compléter."
  },
  {
    "objectID": "sheets/config_globale_ubuntu.html",
    "href": "sheets/config_globale_ubuntu.html",
    "title": "Configurer son ordi Ubuntu pour le calcul scientifique",
    "section": "",
    "text": "Installations via apt_get / aptitude:\nsudo apt-get install aptitude\nsudo aptitude install vim-gtk3\nsudo aptitude install stow git gfortran libnetcdff-dev\nsudo aptitude install libopenmpi-dev openmpi-bin\n\n\nInstallation de Anaconda\n\n\nInstallation d’un environnement Anaconda pour PyFerret:\nInstallation de pyferret (doc à faire)\n\n\nMatlab\n\nTéléchargement de matlab via le site officiel en créant un compte avec votre email univ-tln.fr. L’installation doit se faire via le wifi ou de chez soi à cause du proxy.\nPour Luminy, voir matlab à Luminy\n\n\n\nPenser aussi à:\ncréer une clef SSH et la diffuser sur d’autres ordinateurs pour éviter de taper son mot de passe (voir doc Générer une clef ssh )"
  }
]